/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'huesk' at '1/21/16 10:54 PM' with Gradle 2.6
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.6/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'org.postgresql:postgresql:9.4.1207'
        classpath 'org.flywaydb:flyway-gradle-plugin:3.2.1'
        classpath 'gradle.plugin.org.hibernate.gradle.tools:hibernatetools-gradle-plugin:1.2.3'
    }
}

apply plugin: 'org.hibernate.gradle.tools'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'eclipse'
// Apply the java plugin to add support for Java
apply plugin: 'java'

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/gen/java']
        }
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'

    compile 'com.sparkjava:spark-core:2.3'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'de.svenkubiak:jBCrypt:0.4.1'
    compile 'io.jsonwebtoken:jjwt:0.6.0'
    compile 'org.postgresql:postgresql:9.4.1207'
    // driver 'org.postgresql:postgresql:9.4.1207'
    compile 'org.hibernate:hibernate-core:5.0.7.Final'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

task buildHibernateConfig << {
    File configFile = new File('src/main/resources/hibernate.cfg.xml')
    configFile.delete()
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)
    xml."hibernate-configuration"() {
        "session-factory"() {
            property(name: 'connection.driver_class', jdbcDriver)
            property(name: 'connection.url', jdbcURL)
            property(name: 'connection.user', jdbcUser)
            property(name: 'connection.password', jdbcPassword)
            property(name: 'show_sql', true)
            property(name: 'dialect', 'org.hibernate.dialect.PostgreSQLDialect')
        }
    }
    configFile << writer.toString()
}

ext {
    jdbcDriver = 'org.postgresql.Driver'
    jdbcUser = 'russell'
    jdbcPassword = 'cowsaysoink'
    jdbcURL = 'jdbc:postgresql://localhost:5432/hibernate_forum'
    jdbcDatabaseName = 'public'
    jwtSecret = 'RFBCM0QxOGNlZGVkMjU0RlQwN2UxcTQ4WDl6OXR3'
    jwtDecoded = 'DPB3D18ceded254FT07e1q48X9z9tw'
    webHost = 'forum_test.com'
    webAddress = 'localhost'
    webPort = '8080'
}

flyway {
    url = jdbcURL
    user = jdbcUser
    password = jdbcPassword
}

database {
    basePackage = "me.ninja4826.forum.gen"
    url = jdbcURL
    user = jdbcUser
    password = jdbcPassword
    driver = jdbcDriver
    dialect = "org.hibernate.dialect.PostgreSQLDialect"
}

task buildConfig << {
    Properties props = new Properties()
    File propsFile = new File('src/main/resources/config.properties')
    props.setProperty('jdbcDriver', jdbcDriver)
    props.setProperty('jdbcUser', jdbcUser)
    props.setProperty('jdbcPassword', jdbcPassword)
    props.setProperty('jdbcURL', jdbcURL)
    props.setProperty('jdbcDatabaseName', jdbcDatabaseName)
    props.setProperty('jwtSecret', jwtSecret)
    props.setProperty('webHost', webHost)
    props.setProperty('webAddress', webAddress)
    props.setProperty('webPort', webPort)

    propsFile.withWriter( 'UTF-8' ) { fileWriter ->
        props.each { key, value ->
            fileWriter.writeLine "$key=$value"
        }
    }
}

task(runSimple, dependsOn: 'classes', type: JavaExec) {
    main = 'me.ninja4826.forum.App'
    classpath = sourceSets.main.runtimeClasspath
    systemProperty 'jdbcDriver', jdbcDriver
    systemProperty 'jdbcUser', jdbcUser
    systemProperty 'jdbcPassword', jdbcPassword
    systemProperty 'jdbcURL', jdbcURL
    systemProperty 'jdbcDatabaseName', jdbcDatabaseName
    systemProperty 'webHost', webHost
    systemProperty 'webAddress', webAddress
    systemProperty 'webPort', webPort
}

task hibernate << {
    ant.taskdef(classname: 'org.hibernate.tool.ant.HibernateToolTask') {
        classpath {
            fileset(dir: 'libs', includes: '*.jar')
        }
    }
}
