/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'huesk' at '1/21/16 10:54 PM' with Gradle 2.6
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.6/userguide/tutorial_java_projects.html
 */

import groovy.sql.Sql
import groovy.json.JsonSlurper

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'org.postgresql:postgresql:9.4.1207'
        classpath 'org.flywaydb:flyway-gradle-plugin:3.2.1'
        classpath 'de.svenkubiak:jBCrypt:0.4.1'
    }
}

if (!project.hasProperty("env")) {
    ext.env = "local"
}
def envScript = file("gradle/$env-env.gradle")
if (!envScript.exists()) {
    throw new GradleException("Unknown environment: $env")
}
apply from: envScript

// apply plugin: 'net.saliman.properties'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'eclipse'
// Apply the java plugin to add support for Java
apply plugin: 'java'

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/gen/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

configurations {
    driver
}

compileJava.dependsOn(prep)

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'

    compile 'com.sparkjava:spark-core:2.3'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'de.svenkubiak:jBCrypt:0.4.1'
    compile 'io.jsonwebtoken:jjwt:0.6.0'
    compile 'org.postgresql:postgresql:9.4.1207'
    driver 'org.postgresql:postgresql:9.4.1207'
    compile 'org.hibernate:hibernate-core:5.0.7.Final'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

// ext {
//     jdbcDriver = 'org.postgresql.Driver'
//     jdbcUser = 'russell'
//     jdbcPassword = 'cowsaysoink'
//     jdbcURL = 'jdbc:postgresql://localhost:5432/hibernate_forum'
//     jdbcDatabaseName = 'public'
//     jwtSecret = 'RFBCM0QxOGNlZGVkMjU0RlQwN2UxcTQ4WDl6OXR3'
//     jwtDecoded = 'DPB3D18ceded254FT07e1q48X9z9tw'
//     webHost = 'forum_test.com'
//     webAddress = 'localhost'
//     webPort = '8080'
//
//     hbConfigLocation = 'src/main/resources/hibernate.cfg.xml'
// }

flyway {
    url = jdbcURL
    user = jdbcUser
    password = jdbcPassword
}

task buildConfig(dependsOn: prep) << {
    Properties props = new Properties()
    File propsFile = new File('src/main/resources/config.properties')
    props.setProperty('jdbcDriver', jdbcDriver)
    props.setProperty('jdbcUser', jdbcUser)
    props.setProperty('jdbcPassword', jdbcPassword)
    props.setProperty('jdbcURL', jdbcURL)
    props.setProperty('jdbcDatabaseName', jdbcDatabaseName)
    props.setProperty('jwtSecret', jwtSecret)
    props.setProperty('webHost', webHost)
    props.setProperty('webAddress', webAddress)
    props.setProperty('webPort', webPort)

    propsFile.withWriter( 'UTF-8' ) { fileWriter ->
        fileWriter.writeLine "Environment: $env"
        props.each { key, value ->
            fileWriter.writeLine "$key=$value"
        }
    }
}

task(runSimple, dependsOn: 'classes', type: JavaExec) {
    main = 'me.ninja4826.forum.App'
    classpath = sourceSets.main.runtimeClasspath
    systemProperty 'jdbcDriver', jdbcDriver
    systemProperty 'jdbcUser', jdbcUser
    systemProperty 'jdbcPassword', jdbcPassword
    systemProperty 'jdbcURL', jdbcURL
    systemProperty 'jdbcDatabaseName', jdbcDatabaseName
    systemProperty 'webHost', webHost
    systemProperty 'webAddress', webAddress
    systemProperty 'webPort', webPort
}

task seed(dependsOn: ['flywayClean', 'flywayMigrate']) << {

    URLClassLoader loader = GroovyObject.class.classLoader
    configurations.driver.each { File file ->
        loader.addURL(file.toURL())
    }

    def sql = Sql.newInstance(jdbcURL, jdbcUser, jdbcPassword, jdbcDriver)
    def salt = org.mindrot.jbcrypt.BCrypt.gensalt()
    def hash = org.mindrot.jbcrypt.BCrypt.hashpw('cowsaysoink', salt)
    def user = ['Ninja4826', 'hueske.russ690@gmail.com', salt, hash, 'admin']
    def cat = ['Test Category', 'ugh', 1]
    def topic = ['Test Topic', 'ugh', 1, 1]
    sql.execute 'INSERT INTO "user" (username, email, salt, password_hash, role) VALUES (?, ?, ?, ?, ?)', user
    sql.execute 'INSERT INTO "category" (name, description, hierarchy_level) VALUES (?, ?, ?)', cat
    sql.execute 'INSERT INTO "topic" (title, content, author_id, category_id) VALUES (?, ?, ?, ?)', topic


    sql.close()
}

task buildHibernateConfigs(dependsOn: prepHibernate) << {
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)

    File hbConfigFile = new File(hbConfigLocation)
    def hbObj = new JsonSlurper().parseText(project.ext.get("hbConfig"))

    def helper = new groovy.xml.MarkupBuilderHelper(xml)
    helper.xmlDeclaration([version: '1.0', encoding: 'UTF-8'])
    helper.yieldUnescaped """
<!-- This file was automatically generated using the "buildHibernateConfigs" task from build.gradle. -->

<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
                                             "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

"""

    xml.'hibernate-configuration' {
        'session-factory'() {
            if (hbObj.containsKey('properties') && !hbObj.properties.isEmpty()) {
                hbObj.properties.each{k, v ->
                    property(name: k, v)
                }
            }
            if (hbObj.containsKey('mappings') && hbObj.mappings.containsKey("package") && hbObj.mappings.containsKey("maps") && !hbObj.mappings.maps.isEmpty()) {
                def pName = hbObj.mappings.package
                hbObj.mappings.maps.each {map ->
                    def className = pName + "." + map
                    def fileName = (className.replaceAll("\\.", "/") + ".hbm.xml")
                    mapping(class: className, file: className, package: pName, resource: fileName)
                }
            }
        }
    }
    hbConfigFile.withWriter( 'UTF-8' ) {fileWriter ->
        writer.toString().eachLine {line ->
            fileWriter.writeLine line
        }
    }
}

task testLoc(dependsOn: prep) << {
    println hbConfigLocation
}
