package me.ninja4826.forum.gen;
// Generated Jan 23, 2016 5:01:29 PM by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Category generated by hbm2java
 */
@Entity
@Table(name = "category", schema = "public")
public class Category implements java.io.Serializable {

	private int id;
	private Category parent;
	private String name;
	private String description;
	private int hierarchyLevel = 1;
	private boolean savedBefore = false;
	private Date createdAt;
	private Date updatedAt;
	private Set<Category> children = new HashSet<Category>(0);
	private Set<Topic> topics = new HashSet<Topic>(0);
	private Set<CategoryAncestor> ancestors = new HashSet<CategoryAncestor>(0);
	private Set<CategoryAncestor> descendants = new HashSet<CategoryAncestor>(0);

	public Category() {
	}

	public Category(int id, String name, String description, int hierarchyLevel, boolean savedBefore, Date createdAt, Date updatedAt) {
		this.id = id;
		this.name = name;
		this.description = description;
		this.hierarchyLevel = hierarchyLevel;
		this.savedBefore = savedBefore;
		this.createdAt = createdAt;
		this.updatedAt = updatedAt;
	}

	public Category(int id, Category parent, String name, String description, int hierarchyLevel, boolean savedBefore, Date createdAt,
			Date updatedAt, Set<Category> children, Set<Topic> topics,
			Set<CategoryAncestor> ancestors,
			Set<CategoryAncestor> descendants) {
		this.id = id;
		this.parent = parent;
		this.name = name;
		this.description = description;
		this.hierarchyLevel = hierarchyLevel;
		this.savedBefore = savedBefore;
		this.createdAt = createdAt;
		this.updatedAt = updatedAt;
		this.children = children;
		this.topics = topics;
		this.ancestors = ancestors;
		this.descendants = descendants;
	}

	@Id

	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "parent_id")
	public Category getParent() {
		return this.parent;
	}

	public void setParent(Category category) {
		this.parent = category;
	}

	@Column(name = "name", nullable = false)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "description", nullable = false)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "hierarchy_level", nullable = false)
	public int getHierarchyLevel() {
		return this.hierarchyLevel;
	}

	public void setHierarchyLevel(int hierarchyLevel) {
		this.hierarchyLevel = hierarchyLevel;
	}
	
	@Column(name = "saved_before", nullable = false)
	public boolean getSavedBefore() {
		return this.savedBefore;
	}
	
	public void setSavedBefore(boolean savedBefore) {
		this.savedBefore = savedBefore;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_at", nullable = false, length = 29)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated_at", nullable = false, length = 29)
	public Date getUpdatedAt() {
		return this.updatedAt;
	}

	public void setUpdatedAt(Date updatedAt) {
		this.updatedAt = updatedAt;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "parent")
	public Set<Category> getChildren() {
		return this.children;
	}

	public void setChildren(Set<Category> categories) {
		this.children = categories;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "category")
	public Set<Topic> getTopics() {
		return this.topics;
	}

	public void setTopics(Set<Topic> topics) {
		this.topics = topics;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "categoryByCategoryId")
	public Set<CategoryAncestor> getAncestors() {
		return this.ancestors;
	}

	public void setAncestors(Set<CategoryAncestor> categoryAncestorsForCategoryId) {
		this.ancestors = categoryAncestorsForCategoryId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "categoryByAncestorId")
	public Set<CategoryAncestor> getDescendants() {
		return this.descendants;
	}

	public void setDescendants(Set<CategoryAncestor> categoryAncestorsForAncestorId) {
		this.descendants = categoryAncestorsForAncestorId;
	}

}
