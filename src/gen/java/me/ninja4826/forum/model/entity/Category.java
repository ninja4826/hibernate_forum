package me.ninja4826.forum.model.entity;
// Generated Jan 24, 2016 12:27:19 PM by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;

import me.ninja4826.forum.util.HibernateUtil;

/**
 * Category generated by hbm2java
 */
@Entity
@Table(name = "category", schema = "public")
public class Category extends Item<Category> implements java.io.Serializable {
	
	public static String[] validAssocs = {
			"parent",
			"children",
			"topics",
			"descendants",
			"ancestors"
	};


	@JsonBackReference
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "parent_id")
	private Category parent;

	@Column(name = "name", nullable = false)
	private String name;

	@Column(name = "description")
	private String description;

	@Column(name = "hierarchy_level", nullable = false)
	private int hierarchyLevel;

	@Column(name = "saved_before", nullable = false, columnDefinition="BOOLEAN DEFAULT FALSE")
	private boolean savedBefore;

	@JsonManagedReference
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "parent")
	private Set<Category> children = new HashSet<Category>();

	@JsonManagedReference
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "category")
	private Set<Topic> topics = new HashSet<Topic>(0);

	@JsonManagedReference
	@ManyToMany(cascade={CascadeType.ALL}, fetch = FetchType.LAZY)
	@JoinTable(name="category_ancestor",
			joinColumns={@JoinColumn(name="category_id")},
			inverseJoinColumns={@JoinColumn(name="ancestor_id")})
	private Set<Category> descendants = new HashSet<Category>(0);

	@JsonManagedReference
	@ManyToMany(mappedBy="descendants", cascade={CascadeType.ALL}, fetch = FetchType.LAZY)
	private Set<Category> ancestors = new HashSet<Category>(0);

	public Category() {
		super(Category.class);
	}

	public Category(int id, String name, int hierarchyLevel, boolean savedBefore, Date createdAt, Date updatedAt) {
		super(Category.class, id, createdAt, updatedAt);
		this.name = name;
		this.hierarchyLevel = hierarchyLevel;
		this.savedBefore = savedBefore;
	}

	public Category(int id, Category parent, String name, String description, int hierarchyLevel, boolean savedBefore,
			Date createdAt, Date updatedAt, Set<Category> children, Set<Topic> topics,
			Set<Category> ancestors,
			Set<Category> descendants) {
		super(Category.class, id, createdAt, updatedAt);
		this.parent = parent;
		this.name = name;
		this.description = description;
		this.hierarchyLevel = hierarchyLevel;
		this.savedBefore = savedBefore;
		this.children = children;
		this.topics = topics;
		this.ancestors = ancestors;
		this.descendants = descendants;
	}

	public Category getParent() {
		return this.parent;
	}

	public void setParent(Category category) {
		this.parent = category;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public int getHierarchyLevel() {
		return this.hierarchyLevel;
	}

	public void setHierarchyLevel(int hierarchyLevel) {
		this.hierarchyLevel = hierarchyLevel;
	}

	public boolean isSavedBefore() {
		return this.savedBefore;
	}

	public void setSavedBefore(boolean savedBefore) {
		this.savedBefore = savedBefore;
	}

	public Set<Category> getChildren() {
		return this.children;
	}

	public void setChildren(Set<Category> categories) {
		this.children = categories;
	}

	public Set<Topic> getTopics() {
		return this.topics;
	}

	public void setTopics(Set<Topic> topics) {
		this.topics = topics;
	}

	public Set<Category> getAncestors() {
		return this.ancestors;
	}

	public void setAncestors(Set<Category> ancestors) {
		this.ancestors = ancestors;
	}

	public Set<Category> getDescendants() {
		return this.descendants;
	}

	public void setDescendants(Set<Category> descendants) {
		this.descendants = descendants;
	}

	@Override
	public boolean validate() {
		if (this.getName() == null) return false;

		return true;
	}

	@Override
	public String[] getAssocs() {
		return validAssocs;
	}
	
	@Override
	public boolean beforeUpdate() {
//		TODO: Do ancestor logic.
		return true;
	}
	
	@Override
	public boolean beforeInsert() {
		boolean before = this.beforeUpdate();
		this.setSavedBefore(true);
		return before;
	}

	@Override
	public void load(String... assocs) {
		if (assocs.length == 0) {
			this.load(validAssocs);
			HibernateUtil.transact((s) -> {
				for (String str : assocs) {
					switch (str) {
					case "parent":
						this.parent = this.getParent();
						break;
					case "children":
						this.children = this.getChildren();
						break;
					case "topics":
						this.topics = this.getTopics();
						break;
					case "descendants":
						this.descendants = this.getDescendants();
						break;
					case "ancestors":
						this.ancestors = this.getAncestors();
						break;
					}
				}
				return null;
			}, Category.class);
		}
	}

	@Override
	public void set(String property, Object value) {
		switch (property) {
		case "parent":
			this.setParent((Category) value);
			break;
		case "name":
			this.setName((String) value);
			break;
		case "description":
			this.setDescription((String) value);
			break;
		case "savedBefore":
			this.setSavedBefore((boolean) value);
			break;
		}
	}

}
