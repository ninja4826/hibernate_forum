package me.ninja4826.forum.model.entity;
// Generated Jan 24, 2016 12:27:19 PM by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

import me.ninja4826.forum.util.HibernateUtil;

/**
 * Post generated by hbm2java
 */
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
@Entity
@Table(name = "post", schema = "public")
public class Post extends Item<Post> implements java.io.Serializable {
	
	public static String[] validAssocs = {
			"parent",
			"topic",
			"author",
			"children",
			"descendants",
			"ancestors"
	};


	@JsonBackReference
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "parent_id")
	private Post parent;

	@JsonBackReference
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "topic_id", nullable = false)
	private Topic topic;

	@JsonBackReference
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "author_id", nullable = false)
	private User author;

	@Column(name = "content", nullable = false)
	private String content;

	@Column(name = "hierarchy_level", nullable = false)
	private int hierarchyLevel;

	@Column(name = "saved_before", nullable = false, columnDefinition="BOOLEAN DEFAULT FALSE")
	private boolean savedBefore;

	@JsonManagedReference
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "parent")
	private Set<Post> children = new HashSet<Post>();

	@JsonManagedReference
	@ManyToMany(cascade={CascadeType.ALL}, fetch = FetchType.LAZY)
	@JoinTable(name="post_ancestor",
			joinColumns={@JoinColumn(name="ancestor_id")},
			inverseJoinColumns={@JoinColumn(name="post_id")})
	private Set<Post> descendants = new HashSet<Post>();

	@JsonManagedReference
	@ManyToMany(mappedBy="descendants", cascade={CascadeType.ALL}, fetch = FetchType.LAZY)
	private Set<Post> ancestors = new HashSet<Post>();

	public Post() {
		super(Post.class);
	}

	public Post(int id, Topic topic, User author, String content, int hierarchyLevel, boolean savedBefore, Date createdAt,
			Date updatedAt) {
		super(Post.class, id, createdAt, updatedAt);
		this.topic = topic;
		this.author = author;
		this.content = content;
		this.hierarchyLevel = hierarchyLevel;
		this.savedBefore = savedBefore;
	}

	public Post(int id, Post parent, Topic topic, User author, String content, int hierarchyLevel, boolean savedBefore,
			Date createdAt, Date updatedAt, Set<Post> children, Set<Post> descendants,
			Set<Post> ancestors) {
		super(Post.class, id, createdAt, updatedAt);
		this.parent = parent;
		this.topic = topic;
		this.author = author;
		this.content = content;
		this.hierarchyLevel = hierarchyLevel;
		this.savedBefore = savedBefore;
		this.children = children;
		this.descendants = descendants;
		this.ancestors = ancestors;
	}

	public Post getParent() {
		return this.parent;
	}

	public void setParent(Post post) {
		this.parent = post;
	}

	public Topic getTopic() {
		return this.topic;
	}

	public void setTopic(Topic topic) {
		this.topic = topic;
	}

	public User getAuthor() {
		return this.author;
	}

	public void setAuthor(User user) {
		this.author = user;
	}

	public String getContent() {
		return this.content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	public int getHierarchyLevel() {
		return this.hierarchyLevel;
	}

	public void setHierarchyLevel(int hierarchyLevel) {
		this.hierarchyLevel = hierarchyLevel;
	}

	public boolean isSavedBefore() {
		return this.savedBefore;
	}

	public void setSavedBefore(boolean savedBefore) {
		this.savedBefore = savedBefore;
	}

	public Set<Post> getChildren() {
		return this.children;
	}

	public void setChildren(Set<Post> posts) {
		this.children = posts;
	}

	public Set<Post> getDescendants() {
		return this.descendants;
	}

	public void setDescendants(Set<Post> descendants) {
		this.descendants = descendants;
	}

	public Set<Post> getAncestors() {
		return this.ancestors;
	}

	public void setAncestors(Set<Post> ancestors) {
		this.ancestors = ancestors;
	}

	@Override
	public boolean validate() {
		if (this.getContent() == null) return false;
		if (this.getAuthor() == null) return false;
		if (this.getTopic() == null) return false;

		return true;
	}

	@Override
	public String[] getAssocs() {
		return validAssocs;
	}
	
	@Override
	public boolean beforeUpdate() {
//		TODO: Do Ancestor logic.
		return true;
	}
	
	@Override
	public boolean beforeInsert() {
		boolean before = this.beforeUpdate();
		this.setSavedBefore(true);
		return before;
	}

	@Override
	public void load(String... assocs) {
		if (assocs.length == 0) {
			this.load(validAssocs);
		}
		HibernateUtil.transact((s) -> {
			for (String str : assocs) {
				switch (str) {
				case "parent":
					this.parent = this.getParent();
					break;
				case "topic":
					this.topic = this.getTopic();
					break;
				case "author":
					this.author = this.getAuthor();
					break;
				case "children":
					this.children = this.getChildren();
					break;
				case "descendants":
					this.descendants = this.getDescendants();
					break;
				case "ancestors":
					this.ancestors = this.getAncestors();
					break;
				}
			}
			return null;
		}, Post.class);
	}

	@Override
	public void set(String property, Object value) {
		switch (property) {
		case "parent":
			this.setParent((Post) value);
			break;
		case "topic":
			this.setTopic((Topic) value);
			break;
		case "author":
			this.setAuthor((User) value);
			break;
		case "content":
			this.setContent((String) value);
			break;
		case "hierarchyLevel":
			this.setHierarchyLevel((int) value);
			break;
		case "savedBefore":
			this.setSavedBefore((boolean) value);
			break;
		}
	}
}
