package me.ninja4826.forum.model.entity;
// Generated Jan 24, 2016 12:27:19 PM by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

import me.ninja4826.forum.util.HibernateUtil;

/**
 * Topic generated by hbm2java
 */
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
@Entity
@Table(name = "topic", schema = "public")
public class Topic extends Item<Topic> implements java.io.Serializable {
	
	public static String[] validAssocs = {"category", "author", "posts"};

//	@JsonBackReference
	@JsonManagedReference
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "category_id", nullable = false)
	private Category category;

	@JsonBackReference
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "author_id", nullable = false)
	private User author;

	@Column(name = "title", nullable = false)
	private String title;

	@Column(name = "content", nullable = false)
	private String content;

	@JsonManagedReference
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "topic")
	private Set<Post> posts = new HashSet<Post>(0);

	public Topic() {
		super(Topic.class);
	}

	public Topic(int id, Category category, User author, String title, String content, Date createdAt, Date updatedAt) {
		super(Topic.class, id, createdAt, updatedAt);
		this.category = category;
		this.author = author;
		this.title = title;
		this.content = content;
	}

	public Topic(int id, Category category, User author, String title, String content, Date createdAt, Date updatedAt,
			Set<Post> posts) {
		super(Topic.class, id, createdAt, updatedAt);
		this.category = category;
		this.author = author;
		this.title = title;
		this.content = content;
		this.posts = posts;
	}

	public Category getCategory() {
		return this.category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}

	public User getAuthor() {
		return this.author;
	}

	public void setAuthor(User user) {
		this.author = user;
	}

	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getContent() {
		return this.content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	public Set<Post> getPosts() {
		return this.posts;
	}

	public void setPosts(Set<Post> posts) {
		this.posts = posts;
	}

	@Override
	public String[] getAssocs() {
		return validAssocs;
	}

	@Override
	public boolean validate() {
		if (this.getTitle() == null) return false;
		if (this.getContent() == null) return false;
		if (this.getAuthor() == null) return false;
		if (this.getCategory() == null) return false;

		return true;
	}

	@Override
	public void load(String... assocs) {
		if (assocs.length == 0) {
			this.load(validAssocs);
		}
		HibernateUtil.transact((s) -> {
			for (String str : assocs) {
				switch (str) {
				case "category":
					this.category = this.getCategory();
					break;
				case "author":
					this.author = this.getAuthor();
					break;
				case "posts":
					this.posts = this.getPosts();
					break;
				}
			}
			return null;
		}, Topic.class);
	}

	@Override
	public void set(String property, Object value) {
		switch (property) {
		case "category":
			this.setCategory((Category) value);
			break;
		case "author":
			this.setAuthor((User) value);
			break;
		case "title":
			this.setTitle((String) value);
			break;
		case "content":
			this.setTitle((String) content);
			break;
		}
	}
}
